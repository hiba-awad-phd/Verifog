// automatically generated by Xtext
grammar fr.imta.semafor.FogDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/fogAdlModel" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

FogResource returns FogResource:

	'ApiVersion' ':' 'v.0.1'
	(
		(
		'resourceType' ':' 'FogArea'
			( fogArea)
		) 
		|
		(
		'resourceType' ':' 'FogSystem'
			( fogSystem)
		) 
		|
		(
		'resourceType' ':' 'PhysicalNode'
			( PhysicalNodeType | PhysicalNode)
		) 
		|
		(
		'resourceType' ':' 'VirtualNode'
			( VirtualNodeType | VirtualNode)
		)
		|
		(
		'resourceType' ':' 'Network'
			( NetworkType )
		)
		|
		(
		'resourceType' ':' 'Service'
			( SerivceType )
		)
		|
		(
		'resourceType' ':' 'Application'
			( Application )
		)
		|
		(
		'resourceType' ':' 'Attribute'
			( AttributeType )
		)
	)
	;

VirtualNode returns VirtualNode:
		'metadata' ':'
		('id' ':' name=ID)?
		'tags' ':'
			('-' tags+=Tag)*
		'instanceOf' ':' isInstanceOf=[VirtualNodeSpecification]
		'status' ':'
		'hostedOn' ':' hostingNode=[Node]
		('hosts' ':' 
			('-' hostedVirtualNodes+=[VirtualNode])*)?
		
		(attributes +=AttributeValueUnit)*
	
;

fogSystem returns FogSystem:
	'name' ':' name=EString
//	'fogAreas' ':'
//	('-' fogareas+=fogArea)
;

fogArea returns FogArea:
		'name' ':' name=EString
		'fogSystem' ':' fogsystem=[FogSystem]
;

AttributeType returns AttributeType:
	'name' ':' name=ID
	'type' ':' valueType=EString
	('unitOfMeasurment' ':'
		('-'unitofmeasurment+=[UnitOfMeasurment])*
	)?
	'appliesToResources' ':'
		('-' resources += ResourceType)
		('-' resources += ResourceType)*
;

PhysicalNode returns PhysicalNode:
		'metadata' ':'
		('id' ':' name=ID)?
		'fogArea' ':' fogarea=[FogArea]
		'tags' ':'
			('-' tags+=Tag)*
		'instanceOf' ':' isInstanceOf=[PhysicalNodeSpecification]
		'status' ':'
		('hosts' ':' 
			('-' hostedVirtualNodes+=[VirtualNode])*)?
		(attributes +=AttributeValueUnit)*
;

AttributeValueUnit returns Attribute:
	instanceOf=[AttributeType] ':' value=Value	//unitofmeasurment=[UnitOfMeasurment]
;

Application returns Application:
	'metadata' ':'
		('id' ':' name=ID)?
		'tags' ':'
			('-' tags+=Tag)*
	'Spec' ':'
		'services' ':'
			('-' EString ':'
				(serviceTypes+=SerivceType)? 
			)*
		'connectors' ':'
			('-' 
				connectortypes+=ConnectorType
			)*
;

ConnectorType returns ConnectorType:
	name=ID ':'
//	'importServices' ':'
//	('-' importedNamespace=EString)
	'sourceServices' ':'
	('-' sourceServices+=[ServiceType|ID])*
	'targetServices' ':'
	('-' targetServices+=[ServiceType|ID])*
	
	'constraints' ':'
		('-' constraints+=Constraint)*
;

SerivceType returns ServiceType:
	'metadata' ':'
		('id' ':' name=ID)?
		'tags' ':'
			('-' tags+=Tag)*
	'Spec' ':'
//		'ports' ':'
			((constraints+=PortsConstraint //specify allOf, anyOf or ExculsivelyOneOf
				('-' networkPorts+=NetworkPort)*
			)  | 
			('networkPorts' ':' 
				('-' networkPorts+=NetworkPort)*	//Default is allOf
			))
//
		'hostedOn' ':'
			('virtualNodes' ':'
			('-' EString)
			('-' EString)*)?
			('softwarePacakge' ':'
				'-' implementedBy+=SoftwarePackage
				('-' implementedBy+=SoftwarePackage)*)?
		('constraints' ':' constraints+=Constraint)*
;

SoftwarePackage returns SoftwarePackage:
	name=ID ':'
	'command' ':' installStartScript=EString
	'constraints' ':'
	('-' constraints += ReplicasConstraint)*
;


PortsConstraint returns Constraint:
	{Constraint} 
	expression+=portsExpression ':'
	expression+=MultiplicityExpression ':'
;

MultiplicityExpression returns MultiplicityExpression:
	multiplicityOperator=MultiplicityOperator
;

enum MultiplicityOperator returns MultiplicityOperator:
	AllOf='allOf' |  AllOf='anyOf' | ExclusivelyOneOf='exclusivelyOneOf'
;

portsExpression returns AttributeExpression:
	attributeName='networkPort'
;

NetworkPort returns NetworkPort:
	portName=STRING ':'
	'protocol' ':' protocol=TransportProtocol
	'portNumber' ':' portNumber=INT
	'hostPort' ':' hostPort=INT
	
;

enum TransportProtocol returns TransportProtocol:
	TCP='TCP' | UDP='UDP'
;

NetworkType returns NetworkType:
	'metadata' ':'
		('id' ':' name=ID)?
		'tags' ':'
			('-' tags+=Tag)*
	'Spec' ':'
		'constraints' ':'
			('-' constraints += (Constraint | networkClassConstraint) )*
//	('ipRange' ':' ipRange+=ipRangeConstraint)?
;

Constraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=AttributeExpression ':'
	(
		expression+=(IntegerValueExpression | AttributeExpression) | 
		operator=ComparaisonOperator ':' expression+=(IntegerValueExpression | AttributeExpression)
	)	
;

AttributeExpression returns AttributeExpression:
	//'attributeName' ':'
	 attributeName=EString
;

NetworkLinksType returns NetworkLinkType:
			('metadata' ':'
				'id' ':' name=ID
				'tags' ':'
				('-' tags+=Tag)*
				'Spec' ':'
					'constraints' ':'
					('-' constraints += (Constraint | networkClassConstraint) )*
					'networks' ':'
						('sourceNetworks' ':'
						('-' EString)*)?
						('targetNetworks' ':'
						('-' EString)*)?
						('sourceNode' ':' EString)?
						('targetNode' ':' EString)?
			)
;

networkClassConstraint returns Constraint:
	expression+=NetworkClassExpression  ':'
	(expression+=NetworkClassEnumExpression) | (operator=ComparaisonOperator ':' expression+=IntegerValueExpression)
;

NetworkClassEnumExpression returns NetworkClassExpression:
	value=NetworkClassEnum	
;

enum NetworkClassEnum returns NetworkClass:
	Ethernet='Ethernet' | Wifi='Wifi' | Bluetooth='Bluetooth'
;

NetworkClassExpression returns AttributeExpression:
	attributeName='networkClass'
;

BandwidthConstraint returns Constraint:
	expression+=bandwidthExpression ':' 
	(expression+=IntegerValueExpression 'Mbs') | (operator=ComparaisonOperator ':' expression+=IntegerValueExpression)
;

bandwidthExpression returns AttributeExpression:
	attributeName='bandwidth'
;

ipRangeConstraint returns Constraint:
	expression+=ipRangeExpression expression+=rangeExpression
;

rangeExpression returns CustomExpression:
	':' expression='[' EString ',' EString ']'
;

ipRangeExpression returns AttributeExpression:
	attributeName='ipRange'
;

IpAddress returns IntegerValueExpression:
	EString
;

VirtualNodeType returns VirtualNodeSpecification:
	'metadata' ':'
		('id' ':' name=EString)?
		'tags' ':'
		('-' tags+=Tag)*
	'Spec' ':'
		('image' ':' imageName=ID)
		('imageRegistry' ':' imageRegistry=ID ('.' ID)* )
		(replicas+=ReplicasConstraint)*
		'physicalResources' ':'
		(constraints+=CpuConstraint)*
		(constraints+=MemoryConsraint)*
		(constraints+=diskConstraint)*
		(constraints+=Constraint)*
		('hostingNode' ':'
		  hostingNode=VirtualNodeType)?
		'networkLinks' ':'
			'downloadLink' ':'
				('-' downloadLink += NetworkLinksType)*
			'uploadLink' ':'
				('-' uploadLink += NetworkLinksType)*		
;

enum HealthStatus returns HealthStatus:
	UP='up' | DOWN='down'
;

enum CpuArchitecture returns CPUArchitecture:
	Intel='Intel' | ARM='ARM'
;
	
PhysicalNodeType returns PhysicalNodeSpecification:
	('metadata' ':'
		('id' ':' name=EString)?
		'tags' ':'
		('-' tags+=Tag)*)?
	'Spec' ':'
		'physicalResources' ':'
		(constraints+=CpuConstraint)*
		(constraints+=MemoryConsraint)*
		(constraints+=diskConstraint)*
		(constraints+=Constraint)*
		'networkLinks' ':'
			'downloadLink' ':'
				('-' downloadLink += NetworkLinksType)*
			'uploadLink' ':'
				('-' uploadLink += NetworkLinksType)*

	;

ReplicasConstraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=ReplicasAttributeExpression ':'
	(
		expression+=IntegerValueExpression | 
		operator=ComparaisonOperator ':' expression+=IntegerValueExpression
	)
;

RuntimesConstraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=RuntimesAttributeExpression ':'
	(
		'{' expression+=CustomExpression '}' | 
		operator=ComparaisonOperator ':' '{' expression+=CustomExpression '}'
	)
;

CustomExpression returns CustomExpression:
	expression=STRING
;

diskConstraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=DiskAttributeExpression ':'
	(
		expression+=IntegerValueExpression | 
		operator=ComparaisonOperator ':' expression+=IntegerValueExpression
	)
;
	
MemoryConsraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=MemoryAttributeExpression ':'
	(
		expression+=IntegerValueExpression | 
		operator=ComparaisonOperator ':' expression+=IntegerValueExpression
	)
;

CpuConstraint returns Constraint:
	{Constraint} 
	//operator='Lesser' because is defined as default in the ecore model
	expression+=CpuAttributeExpression ':'
	(
		expression+=IntegerValueExpression | 
		operator=ComparaisonOperator ':' expression+=IntegerValueExpression
	)
;

IntegerValueExpression returns IntegerValueExpression:
	value=INT
;

ReplicasAttributeExpression returns AttributeExpression:
	attributeName='replicas'
;

RuntimesAttributeExpression returns AttributeExpression:
	attributeName='runtimes'
;

DiskAttributeExpression returns AttributeExpression:
	attributeName='diskStorage'
;

MemoryAttributeExpression returns AttributeExpression:
	attributeName='memory'
;

CpuAttributeExpression returns AttributeExpression:
	attributeName='CpuCores'
;

enum ComparaisonOperator:
	Lesser='Lesser' | Greater='Greater' | Equal='Equal' | LesserOrEqual = 'LesserOrEqual' | GreaterOrEqual='GreaterOrEqual' 
;

enum ResourceType:
	VirtualNode='VirtualNode' | PhysicalNode='PhysicalNode' | NetworkLink = 'NetworkLink' | Network = 'Network' | Application = 'Application' | Service = 'Service'
;

Value:
	STRING | INT
;

Tag returns Tag:
	key=ID ':' value=ID
;

EString returns ecore::EString:
	STRING | ID;
	
	
	//////////// Topology concrete syntax
	
	
	
//VirtualNode returns VirtualNode:
//	('metadata' ':'
//		('alias' ':' alias=EString)?
//		('id' ':' id=EString)?
//		'tags' ':'
//		('-' tags+=Tag)*)
//	'instanceOf' ':' ((isInstanceOf=[VirtualNodeSpecification|ID]) |
//	(referenceToVirtualNodeType=STRING))?
//	'status' ':'
////		'controlArea' : [ControlArea|EString]
//		('hostedOn' ':' hostingNode=[Node|EString])?
//		'resources' ':'
//			'physicalResources' ':'
//				'CPUCores' ':' CPUCores=INT
//				'memory' ':' memory=INT
//				'diskStorage' ':' diskStorage=INT
//				'cpuArchitecture' ':' cpuArchitecture=CpuArchitecture
//				'Health' ':' healthStatus=HealthStatus
//		('hosts' ':'
//			'virtualNodes' ':' '{' hostedVirtualNodes+=[VirtualNode|EString] (','  hostedVirtualNodes+=[VirtualNode|EString])* '}')?
////			'Services' ':' '{' hostedServices+=[Service|EString] (','  hostedServices+=[Service|EString])* '}')?
//
//	;
//
//PhysicalNode returns PhysicalNode:
//	('metadata' ':'
//		('alias' ':' alias=EString)?
//		('id' ':' id=EString)?
//		'tags' ':'
//		('-' tags+=Tag)*)
//	('instanceOf' ':'
//	isInstanceOf=[PhysicalNodeSpecification|EString])?
//	'status' ':'
////		'controlArea' : [ControlArea|EString]
////		'isInstanceOf' ':' Already above
//		'resources' ':'
//			'physicalResources' ':'
//				'CPUCores' ':' CPUCores=INT
//				'memory' ':' memory=INT
//				'diskStorage' ':' diskStorage=INT
//				'cpuArchitecture' ':' cpuArchitecture=CpuArchitecture
//				'Health' ':' healthStatus=HealthStatus
//		('hosts' ':'
//			'virtualNodes' ':' '{' hostedVirtualNodes+=[VirtualNode|EString] (','  hostedVirtualNodes+=[VirtualNode|EString])* '}')?
////			'Services' ':' '{' hostedServices+=[Service|EString] (','  hostedServices+=[Service|EString])* '}')?
//	;
	